TypeScript inherits the built-in types from JavaScript. 
TypeScript types is categorized into:

    Primitive types : string, number, boolean, null, undefined, symbol
    Object types : functions, arrays, classes, etc


There are two main purposes of types in TypeScript:

    First, types are used by the TypeScript compiler to analyze your code for errors
    Second, types allow you to understand what values are associated with variables.


Annotation
----------

let variableName: type;
let variableName: type = value;
const constantName: type = value;

Examples
---------
let counter: number;
counter=1;


let name: string = 'John';
let age: number = 25;
let active: boolean = true;


let arrayName: type[];
let names: string[] = ['John', 'Jane', 'Peter', 'David', 'Mary'];


let person: {
   name: string;
   age: number
};

person = {
   name: 'John',
   age: 25
}


 The forEach() method is an array method that is used to execute a function on each item in an array.

// Iterate Through Array
let programmingLangs : string[] = ['C', 'C++', 'Java', 'JavaScript'];

// using forEach() method
programmingLangs.forEach(element => {
    console.log(element);
});



for in example
--------------
let intArray = [10, 20, 30, 40];

for (var index in intArray) {
  console.log(index); // prints indexes: 0, 1, 2, 3

  console.log(intArray[index]); // prints elements: 10, 20, 30, 40
}

// iterate over object properties example
let user = {
    "firstName" : "ramesh",
    "lastName" : "fadatare",
    "fullName" : "ramesh fadatare"
}

for (const key in user) {
    if (user.hasOwnProperty(key)) {
        const element = user[key];
        console.log(element);
    }
}




TypeScript userdefined functions
--------------------------------

function name(parameter: type, parameter:type,...): returnType {
   // do something
}

function add(a: number, b: number): number {
    return a + b;
}

let sum = add(10,20);
console.log(sum);

let result = add('10','20');


function echo(message: string): void {
    console.log(message.toUpperCase());
}



Defining the class
------------------

function Person(ssn, firstName, lastName) {
    this.ssn = ssn;
    this.firstName = firstName;
    this.lastName = lastName;
}

Person.prototype.getFullName = function () {
    return `${this.firstName} ${this.lastName}`;
}


let person = new Person('171-28-0926','John','Doe');
console.log(person.getFullName());


Output:
John Doe


Another type
-------------
class Person {
    ssn;
    firstName;
    lastName;

    constructor(ssn, firstName, lastName) {
        this.ssn = ssn;
        this.firstName = firstName;
        this.lastName = lastName;
    }
}


class Person {
    ssn;
    firstName;
    lastName;

    constructor(ssn, firstName, lastName) {
        this.ssn = ssn;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    getFullName() {
        return `${this.firstName} ${this.lastName}`;
    }
}


Object creation:

let person = new Person('171-28-0926','John','Doe');
console.log(person.getFullName());


class Person {
    ssn: string;
    firstName: string;
    lastName: string;

    constructor(ssn: string, firstName: string, lastName: string) {
        this.ssn = ssn;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    getFullName(): string {
        return `${this.firstName} ${this.lastName}`;
    }
}




Access modifiers change the visibility of the properties and methods of a class. 
TypeScript provides three access modifiers:

    private
    protected
    public



Inheritance
-----------
A class can reuse the properties and methods of another class. 
This is called inheritance in TypeScript.

The class which inherits properties and methods is called the child class. 
And the class whose properties and methods are inherited is known as the parent class

class Person {
    constructor(private firstName: string, private lastName: string) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    getFullName(): string {
        return `${this.firstName} ${this.lastName}`;
    }
    describe(): string {
        return `This is ${this.firstName} ${this.lastName}.`;
    }
}


extends is the keyword used to inherit the properties

class Employee extends Person {
    //..
}


As parent class Person has constructor, we need to pass the parameters to it
from child class, using super() method.


class Employee extends Person {
    constructor(firstName: string,lastName: string, private jobTitle: string) 
    {
        
        // call the constructor of the Person class:
        super(firstName, lastName);
    }
}


let employee = new Employee('John','Doe','Front-end Developer');
let employee = new Employee('John', 'Doe', 'Web Developer');

console.log(employee.getFullName());
console.log(employee.describe());


interfaces
----------
interface KeyPair {
    key: number;
    value: string;
}

let kv1: KeyPair = { key:1, value:"Steve" }; // OK



interface KeyValueProcessor
{
    (key: number, value: string): void;
};

function addKeyValue(key:number, value:string):void { 
    console.log('addKeyValue: key = ' + key + ', value = ' + value)
}

function updateKeyValue(key: number, value:string):void { 
    console.log('updateKeyValue: key = '+ key + ', value = ' + value)
}
    
let kvp: KeyValueProcessor = addKeyValue;
kvp(1, 'Bill'); //Output: addKeyValue: key = 1, value = Bill 

kvp = updateKeyValue;
kvp(2, 'Steve'); //Output: updateKeyValue: key = 2, value = Steve 



export interface Employee{
    firstName: string;
    lastName: string;
    fullName(): string;
}

let employee: Employee = {
    firstName : "ramesh",
    lastName: "kumar",
    fullName(): string{
        return this.firstName + " " + this.lastName;
    }
}

console.log(employee.firstName);
console.log(employee.lastName);
console.log(employee.fullName());





